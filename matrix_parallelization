# include <cstdlib>
# include <iostream>
# include <cmath>
# include <ctime>
# include "omp.h"

using namespace std;

int main();
void timestamp ( );

int main()
{
  double a[500][500];
  double angle;
  double b[500][500];
  double c[500][500];
  int i;
  int j;
  int k;
  int n = 500;
  double pi = 3.141592653589793;
  double s;
  int thread_num;
  double wtime;

  timestamp();
  thread_num = omp_get_max_threads();
  
  s = 1.0/sqrt((double)(n));
  wtime = omp_get_wtime();
  #pragma omp parallel shared(a,b,c,n,pi,s) private(angle,i,j,k)
  {
    #pragma omp for
    for ( i = 0; i < n; i++ )
    {
    for ( j = 0; j < n; j++ )
    {
      angle = 2.0 * pi *i* j/(double) n;
      a[i][j] = s * (sin(angle)+cos(angle));
      }
    }
    #pragma omp for
    for (i = 0; i<n;i++ )
    {
      for (j=0;j<n;j++ )
      {
        b[i][j] = a[i][j];
      }
    }
    #pragma omp for
    for ( i = 0; i < n; i++ )
    {
      for ( j = 0; j < n; j++ )
      {
        c[i][j] = 0.0;
        for ( k = 0; k < n; k++ )
        {
          c[i][j] = c[i][j] + a[i][k] * b[k][j];
        }
      }
    }
  }
  timestamp();
  return 0;
}
void timestamp ( )
{
#define TIME_SIZE 40
static char time_buffer[TIME_SIZE];
const struct tm *tm_ptr;
std::time_t now;
now = time(NULL );
tm_ptr = localtime(&now );
strftime ( time_buffer, TIME_SIZE, "%d %B %Y %I:%M:%S %p", tm_ptr );
cout << time_buffer << "\n";
return;
#undef TIME_SIZE
}
