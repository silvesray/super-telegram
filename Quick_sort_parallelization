#include<iostream>
#include "omp.h"
#include <algorithm>

#define n 100000
using namespace std;

int partition(int arr[], int low, int high)
{
	int i, j, temp, key;
	key = arr[low];
	i= low + 1;
	j= high;
	while(1)
  {
		while(i < high && key >= arr[i])
    			i++;
		while(key < arr[j])
    			j--;
		if(i < j){
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
		}
		else
    {
			temp= arr[low];
			arr[low] = arr[j];
			arr[j]= temp;
			return(j);
		}
	}
}
 
void quicksort(int arr[], int low, int high)
{
int j;
if(low < high)
  {
	j = partition(arr, low, high);
	#pragma omp parallel sections
	{
		#pragma omp section
		{
        		quicksort(arr,0, j - 1);
    		}
		#pragma omp section
		{
        		quicksort(arr, j + 1, n-1);
   		}
	}
  }
}


int main()
{
	int start_s=clock();
	for(int i=0;i<n;i++){
		arr[i]=rand()%n;
	}
  quicksort(arr, 0, n - 1);
	int stop_s=clock();//end Time
	printf("Time taken: %.6fs\n", (double)(stop_s - start_s));
}
